{"version":3,"file":"static/js/41.88d3467d.chunk.js","mappings":"0MAGO,MAAMA,EAAOC,EAAAA,GAAOC,GAAEC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oCAIhBC,EAAOJ,EAAAA,GAAOK,GAAEC,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,2EAMhBI,GAAYP,EAAAA,EAAAA,IAAOQ,EAAAA,GAAPR,CAAYS,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,+F,aCVrC,MAgBA,EAhBmBO,IAAgB,IAAf,MAAEC,GAAOD,EAC3B,MAAME,GAAWC,EAAAA,EAAAA,MAEjB,OACEC,EAAAA,EAAAA,KAACf,EAAI,CAAAgB,SACFJ,EAAMK,KAAIC,IACTH,EAAAA,EAAAA,KAACV,EAAI,CAAAW,UACHD,EAAAA,EAAAA,KAACP,EAAS,CAACW,GAAE,WAAAC,OAAaF,EAAKG,IAAMC,MAAO,CAAEC,KAAMV,GAAWG,SAC5DE,EAAKM,SAFCN,EAAKG,OAMb,C,mGCbJ,MAAMI,EAAaxB,EAAAA,GAAOyB,KAAIvB,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oDAKhBH,EAAAA,GAAO0B,MAAKpB,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,gTAkBXH,EAAAA,GAAO2B,OAAMlB,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,0R,aCtBnC,MAiCA,EAjCaO,IAAuB,IAAtB,aAAEkB,GAAclB,EAC5B,MAAOmB,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,IAWnC,OACEC,EAAAA,EAAAA,MAACR,EAAU,CAACS,SANOC,IACnBA,EAAMC,iBACNP,EAAaC,EAAMO,cAAc,EAIErB,SAAA,EACjCD,EAAAA,EAAAA,KAAA,SACEuB,UAAU,oNACVC,KAAK,OACLC,KAAK,QACLC,WAAS,EACTC,MAAOZ,EACPa,SAjBoBR,IACxBJ,EAASI,EAAMS,OAAOF,MAAM,EAiBxBG,YAAY,iBAEd9B,EAAAA,EAAAA,KAAA,UACEuB,UAAU,gOACVC,KAAK,SAAQvB,SACd,aAGU,E,aC1BjB,MA8BA,EA9Be8B,KACb,MAAOC,EAAaC,IAAkBhB,EAAAA,EAAAA,UAAS,KACxCiB,EAASC,IAAclB,EAAAA,EAAAA,WAAS,IAChCmB,EAAcC,IAAmBpB,EAAAA,EAAAA,WAAS,GAejD,OACEC,EAAAA,EAAAA,MAAA,QAAAjB,SAAA,EACED,EAAAA,EAAAA,KAACsC,EAAI,CAACxB,aAfWyB,UACnB,IACEJ,GAAW,GACX,MAAMK,QAAsBC,EAAAA,EAAAA,IAAqBC,GACjDT,EAAeO,GACfH,EAAyC,IAAzBG,EAAcG,OAChC,CAAE,MAAOC,GACPC,QAAQD,MAAMA,EAChB,CAAC,QACCT,GAAW,EACb,KAMGD,IAAWlC,EAAAA,EAAAA,KAAC8C,EAAAA,EAAM,IAClBV,IACCpC,EAAAA,EAAAA,KAAA,KAAAC,SAAG,6DAEJ+B,EAAYW,OAAS,IAAK3C,EAAAA,EAAAA,KAAC+C,EAAAA,EAAU,CAAClD,MAAOmC,MACzC,C,mFC9BXgB,EAAAA,EAAMC,SAASC,QAAU,gCAEzB,MAAMC,EAAU,mCAEHC,EAAgBb,gBACJS,EAAAA,EAAMK,IAAI,8BAADhD,OAA+B8C,KAC/CG,KAAKC,QAGVd,EAAuBF,gBACXS,EAAAA,EAAMK,IAAI,wBAADhD,OACN8C,EAAO,qDAAA9C,OAAoDmD,KAErEF,KAAKC,QAGVE,EAAoBlB,gBACRS,EAAAA,EAAMK,IAAI,SAADhD,OACrBqD,EAAO,aAAArD,OAAY8C,EAAO,qBAErBG,KAGLK,EAAcpB,gBACFS,EAAAA,EAAMK,IAAI,SAADhD,OACrBqD,EAAO,qBAAArD,OAAoB8C,EAAO,qBAE7BG,KAAKM,KAGVC,EAAetB,gBACHS,EAAAA,EAAMK,IAAI,SAADhD,OACrBqD,EAAO,qBAAArD,OAAoB8C,EAAO,4BAE7BG,KAAKC,O","sources":["pages/EditorList/EditorList.styled.jsx","pages/EditorList/EditorList.jsx","components/Form/Form.styled.jsx","components/Form/Form.jsx","pages/Movies/Movies.jsx","services/tmbdApi.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  list-style-type: none;\n`;\n\nexport const Item = styled.li`\n  font-weight: 600;\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n  color: #191d1e;\n\n  &:hover {\n    color: tomato;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport { List, Item, MovieLink } from './EditorList.styled';\n\nconst EditorList = ({ films }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {films.map(film => (\n        <Item key={film.id}>\n          <MovieLink to={`/movies/${film.id}`} state={{ from: location }}>\n            {film.title}\n          </MovieLink>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nexport default EditorList;\n","import styled from 'styled-components';\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n`;\n\nexport const Input = styled.input`\n  padding: 12px 14px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 3px solid #191d1e;\n  font-weight: 600;\n  font-size: 20px;\n  margin-right: 10px;\n  border-radius: 4px 8px;\n  outline: none;\n\n  &:hover {\n    color: tomato;\n    border: 3px solid tomato;\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 12px 12px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 3px solid #191d1e;\n  color: #191d1e;\n  font-weight: 600;\n  font-size: 20px;\n  border-radius: 4px 8px;\n\n  &:hover {\n    color: tomato;\n    border: 3px solid tomato;\n  }\n`;\n","import { useState } from 'react';\nimport { SearchForm } from './Form.styled';\n\nconst Form = ({ searchMovies }) => {\n  const [query, setQuery] = useState('');\n\n  const handleInputChange = event => {\n    setQuery(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    searchMovies(query.toLowerCase());\n  };\n\n  return (\n    <SearchForm onSubmit={handleSubmit}>\n      <input\n        className=\"mr-2 min-w-0 rounded-md border-2 border-[#64748b] bg-[#6e7376]/5 px-3.5 py-2 text-[#000000] shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm sm:leading-6\"\n        type=\"text\"\n        name=\"query\"\n        autoFocus\n        value={query}\n        onChange={handleInputChange}\n        placeholder=\"Enter Movie\"\n      />\n      <button\n        className=\"flex-none rounded-md bg-indigo-500 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-500\"\n        type=\"submit\"\n      >\n        Search\n      </button>\n    </SearchForm>\n  );\n};\n\nexport default Form;\n","import { useState } from 'react';\nimport Loader from 'components/Loader/Loader';\nimport EditorList from 'pages/EditorList/EditorList';\nimport Form from 'components/Form/Form';\nimport { fetchSearchByKeyword } from 'services/tmbdApi';\n\nconst Movies = () => {\n  const [searchFilms, setSearchFilms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [noMoviesText, setNoMoviesText] = useState(false);\n\n  const searchMovies = async queryMovie => {\n    try {\n      setLoading(true);\n      const searchResults = await fetchSearchByKeyword(queryMovie);\n      setSearchFilms(searchResults);\n      setNoMoviesText(searchResults.length === 0);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <main>\n      <Form searchMovies={searchMovies} />\n      {loading && <Loader />}\n      {noMoviesText && (\n        <p>There are no movies with this request. Please, try again</p>\n      )}\n      {searchFilms.length > 0 && <EditorList films={searchFilms} />}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '992758a4802a699e8df27d4d6efc34fb';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\nexport const fetchSearchByKeyword = async keyword => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["List","styled","ul","_templateObject","_taggedTemplateLiteral","Item","li","_templateObject2","MovieLink","Link","_templateObject3","_ref","films","location","useLocation","_jsx","children","map","film","to","concat","id","state","from","title","SearchForm","form","input","button","searchMovies","query","setQuery","useState","_jsxs","onSubmit","event","preventDefault","toLowerCase","className","type","name","autoFocus","value","onChange","target","placeholder","Movies","searchFilms","setSearchFilms","loading","setLoading","noMoviesText","setNoMoviesText","Form","async","searchResults","fetchSearchByKeyword","queryMovie","length","error","console","Loader","EditorList","axios","defaults","baseURL","API_KEY","fetchTrending","get","data","results","keyword","fetchMovieDetails","movieId","fetchActors","cast","fetchReviews"],"sourceRoot":""}